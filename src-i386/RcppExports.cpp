// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// cross_mat
NumericMatrix cross_mat(Eigen::Map<Eigen::VectorXi> Match, Eigen::Map<Eigen::VectorXi> ii, Eigen::Map<Eigen::VectorXi> p, Eigen::Map<Eigen::MatrixXd> Sv, int n, int nc);
RcppExport SEXP GWR_cross_mat(SEXP MatchSEXP, SEXP iiSEXP, SEXP pSEXP, SEXP SvSEXP, SEXP nSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXi> >::type Match(MatchSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXi> >::type ii(iiSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXi> >::type p(pSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type Sv(SvSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    rcpp_result_gen = Rcpp::wrap(cross_mat(Match, ii, p, Sv, n, nc));
    return rcpp_result_gen;
END_RCPP
}
// cross_mat_vec
NumericVector cross_mat_vec(Eigen::Map<Eigen::VectorXi> Match, Eigen::Map<Eigen::MatrixXd> Sv, Eigen::Map<Eigen::VectorXd> Y, int n, int nc);
RcppExport SEXP GWR_cross_mat_vec(SEXP MatchSEXP, SEXP SvSEXP, SEXP YSEXP, SEXP nSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXi> >::type Match(MatchSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type Sv(SvSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    rcpp_result_gen = Rcpp::wrap(cross_mat_vec(Match, Sv, Y, n, nc));
    return rcpp_result_gen;
END_RCPP
}
// cross_vec
NumericMatrix cross_vec(Eigen::Map<Eigen::VectorXi> Match, Eigen::Map<Eigen::MatrixXd> Sv, int n, int nc);
RcppExport SEXP GWR_cross_vec(SEXP MatchSEXP, SEXP SvSEXP, SEXP nSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXi> >::type Match(MatchSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type Sv(SvSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    rcpp_result_gen = Rcpp::wrap(cross_vec(Match, Sv, n, nc));
    return rcpp_result_gen;
END_RCPP
}
// cross_vec_mat
NumericVector cross_vec_mat(Eigen::Map<Eigen::VectorXi> Match, Eigen::Map<Eigen::MatrixXd> Sv, Eigen::Map<Eigen::VectorXd> Y, int n, int nc);
RcppExport SEXP GWR_cross_vec_mat(SEXP MatchSEXP, SEXP SvSEXP, SEXP YSEXP, SEXP nSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXi> >::type Match(MatchSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type Sv(SvSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    rcpp_result_gen = Rcpp::wrap(cross_vec_mat(Match, Sv, Y, n, nc));
    return rcpp_result_gen;
END_RCPP
}
// GWR_core1_Deck
NumericVector GWR_core1_Deck(Eigen::Map<Eigen::VectorXi> Match, Eigen::Map<Eigen::MatrixXd> D, Eigen::Map<Eigen::VectorXd> Y, Eigen::Map<Eigen::VectorXd> Z);
RcppExport SEXP GWR_GWR_core1_Deck(SEXP MatchSEXP, SEXP DSEXP, SEXP YSEXP, SEXP ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXi> >::type Match(MatchSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type D(DSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Z(ZSEXP);
    rcpp_result_gen = Rcpp::wrap(GWR_core1_Deck(Match, D, Y, Z));
    return rcpp_result_gen;
END_RCPP
}
// GWR_core2
NumericVector GWR_core2(Eigen::Map<Eigen::VectorXi> Match, Eigen::Map<Eigen::MatrixXd> D, Eigen::Map<Eigen::VectorXi> i, Eigen::Map<Eigen::VectorXi> p, int n, int nc);
RcppExport SEXP GWR_GWR_core2(SEXP MatchSEXP, SEXP DSEXP, SEXP iSEXP, SEXP pSEXP, SEXP nSEXP, SEXP ncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXi> >::type Match(MatchSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type D(DSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXi> >::type i(iSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXi> >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type nc(ncSEXP);
    rcpp_result_gen = Rcpp::wrap(GWR_core2(Match, D, i, p, n, nc));
    return rcpp_result_gen;
END_RCPP
}
// GWR_core1
NumericVector GWR_core1(Eigen::Map<Eigen::VectorXi> Match, Eigen::Map<Eigen::MatrixXd> D, Eigen::Map<Eigen::VectorXd> Y);
RcppExport SEXP GWR_GWR_core1(SEXP MatchSEXP, SEXP DSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXi> >::type Match(MatchSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type D(DSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(GWR_core1(Match, D, Y));
    return rcpp_result_gen;
END_RCPP
}
// MoranI
List MoranI(Eigen::Map<Eigen::VectorXi> Match, Eigen::Map<Eigen::VectorXi> plz, Eigen::Map<Eigen::VectorXi> Dplz, Eigen::Map<Eigen::MatrixXd> D, Eigen::Map<Eigen::VectorXd> Y, double TSS);
RcppExport SEXP GWR_MoranI(SEXP MatchSEXP, SEXP plzSEXP, SEXP DplzSEXP, SEXP DSEXP, SEXP YSEXP, SEXP TSSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXi> >::type Match(MatchSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXi> >::type plz(plzSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXi> >::type Dplz(DplzSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type D(DSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type TSS(TSSSEXP);
    rcpp_result_gen = Rcpp::wrap(MoranI(Match, plz, Dplz, D, Y, TSS));
    return rcpp_result_gen;
END_RCPP
}
// MoranI_MC
List MoranI_MC(Eigen::Map<Eigen::VectorXi> Match, Eigen::Map<Eigen::VectorXi> plz, Eigen::Map<Eigen::VectorXi> Dplz, Eigen::Map<Eigen::MatrixXd> D, Eigen::Map<Eigen::VectorXd> Y, double TSS);
RcppExport SEXP GWR_MoranI_MC(SEXP MatchSEXP, SEXP plzSEXP, SEXP DplzSEXP, SEXP DSEXP, SEXP YSEXP, SEXP TSSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXi> >::type Match(MatchSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXi> >::type plz(plzSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXi> >::type Dplz(DplzSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type D(DSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type TSS(TSSSEXP);
    rcpp_result_gen = Rcpp::wrap(MoranI_MC(Match, plz, Dplz, D, Y, TSS));
    return rcpp_result_gen;
END_RCPP
}
